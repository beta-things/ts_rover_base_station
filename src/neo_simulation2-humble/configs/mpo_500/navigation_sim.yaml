neo_localization2_node:
  ros__parameters:
    base_frame: "base_footprint"
    odom_frame: "odom"
    # exponential low pass gain for localization update (0 to 1)
    #   (higher gain means odometry is less used / relied on)
    update_gain: 0.5
    # time based confidence gain when in 2D / 1D mode
    confidence_gain: 0.01
    # how many particles (samples) to spread (per update)
    sample_rate: 10
    # localization update rate [ms]
    loc_update_time: 100
    # map tile update rate [1/s]
    map_update_rate: 0.5
    # map tile size in pixels
    map_size: 2000
    # how often to downscale (half) the original map
    map_downscale: 0
    # how many 3x3 gaussian smoothing iterations are applied to the map
    num_smooth: 5
    # minimum score for valid localization (otherwise 0D mode)
    #    higher values make it go into 0D mode earlier
    min_score: 0.2
    # odometry error in x and y [m/m] [1]
    #    how fast to increase particle spread when in 1D / 0D mode
    odometry_std_xy: 0.01
    # odometry error in yaw angle [rad/rad] [1]
    #  how fast to increase particle spread when in 0D mode
    odometry_std_yaw: 0.01
    # minimum particle spread in x and y [m]
    min_sample_std_xy: 0.025
    # minimum particle spread in yaw angle [rad]
    min_sample_std_yaw: 0.025
    # initial/maximum particle spread in x and y [m]
    max_sample_std_xy: 0.5
    # initial/maximum particle spread in yaw angle [rad]
    max_sample_std_yaw: 0.5
    # threshold for 1D / 2D decision making (minimum average second order gradient)
    # if worst gradient direction is below this value we go into 1D mode
    # if both gradient directions are below we may go into 0D mode, depending on disable_threshold
    # higher values will make it go into 1D / 0D mode earlier
    constrain_threshold: 0.1
    # threshold for 1D / 2D decision making (with or without orientation)
    #   higher values will make it go into 1D mode earlier
    constrain_threshold_yaw: 0.2
    # minimum number of points per update
    min_points: 20
    # solver update gain, lower gain = more stability / slower convergence
    solver_gain: 0.1
    # solver update damping, higher damping = more stability / slower convergence
    solver_damping: 1000.0
    # number of gauss-newton iterations per sample per scan
    solver_iterations: 20
    # maximum wait for getting transforms [s]
    transform_timeout: 0.2
    # if to broadcast map frame
    broadcast_tf: true
    # Scan topic
    scan_topic: "/scan"
    # Initial Pose topic
    initialpose: initialpose
    # Map Tile topic
    map_tile: map_tile
    # Map Pose topic
    map_pose: map_pose
    # particle_cloud topic
    particle_cloud: particlecloud
    # amcl_pose topic
    amcl_pose: amcl_pose

amcl:
  ros__parameters:
    use_sim_time: true
    alpha1: 0.05
    alpha2: 0.05
    alpha3: 0.05
    alpha4: 0.05
    alpha5: 0.05
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    set_initial_pose: false
    laser_likelihood_max_dist: 2.0
    laser_max_range: -1.0
    laser_min_range: 1.5
    laser_model_type: "likelihood_field"
    max_beams: 200
    max_particles: 1250
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.01
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 2
    robot_model_type: "nav2_amcl::OmniMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 0.1
    scan_topic: /scan
    update_min_a: 0.1
    update_min_d: 0.1
    # z_hit: 0.5
    # z_max: 0.05
    # z_rand: 0.5

amcl_map_client:
  ros__parameters:
    use_sim_time: true

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: true

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.5, 2.5]
    min_velocity: [-0.5, -0.5, -2.5]
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 5.0
    max_accel: [0.5, 0.5, 3.2]
    max_decel: [-0.5, -0.5, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    use_realtime_priority: false
    enable_stamped_cmd_vel: false

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# ---------------------------------------------------------------------------REGULATED PURE PESUIT
# controller_server:
#   ros__parameters:
#     controller_frequency: 30.0
#     min_x_velocity_threshold: 0.02
#     min_y_velocity_threshold: 0.02
#     min_theta_velocity_threshold: 0.01
#     progress_checker_plugins: ["progress_checker"]
#     goal_checker_plugins: ["goal_checker"]
#     controller_plugins: ["FollowPath"]
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.1
#       yaw_goal_tolerance: 0.1
#       stateful: True
#     FollowPath:
#       plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
#       desired_linear_vel: 0.2
#       lookahead_dist: 0.15
#       min_lookahead_dist: 0.5
#       max_lookahead_dist: 0.4
#       lookahead_time: 0.5
#       transform_tolerance: 0.2
#       use_velocity_scaled_lookahead_dist: true
#       min_approach_linear_velocity: 0.05
#       approach_velocity_scaling_dist: 1.0
#       use_collision_detection: true
#       max_allowed_time_to_collision_up_to_carrot: 1.0
#       use_regulated_linear_velocity_scaling: true
#       use_cost_regulated_linear_velocity_scaling: false
#       regulated_linear_scaling_min_radius: 0.9
#       regulated_linear_scaling_min_speed: 0.25
#       use_fixed_curvature_lookahead: false
#       curvature_lookahead_dist: 1.0
#       use_rotate_to_heading: false
#       max_angular_accel: 1.0
#       max_robot_pose_search_dist: 10.0
#       cost_scaling_dist: 0.3
#       cost_scaling_gain: 1.0
#       inflation_cost_scaling_factor: 3.0

# -----------------------------------------------------------------------NEO MPC


controller_server:
  ros__parameters:
    # controller server parameters (see Controller Server for more info)
    controller_plugins: ["FollowPath"]
    controller_frequency: 20.0
    controller_plugin_types: ["neo_mpc_planner::NeoMpcPlanner"]
    goal_checker_plugin: "goal_checker"
    current_goal_checker: "goal_checker"
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 100.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.015
      yaw_goal_tolerance: 0.03
      stateful: True
    FollowPath:
      plugin: "neo_mpc_planner::NeoMpcPlanner"
      lookahead_dist_min: 0.01
      lookahead_dist_max: 0.1
      lookahead_dist_close_to_goal: 0.01
      control_steps: 3

mpc_optimization_server:
  ros__parameters:
    acc_x_limit: 0.1
    acc_y_limit: 0.1
    acc_theta_limit: 0.50
    min_vel_x: -0.15
    min_vel_y: -0.15
    min_vel_trans: -0.15
    min_vel_theta: -0.5
    max_vel_x: 0.15
    max_vel_y: 0.15
    max_vel_trans: 0.15
    max_vel_theta: 0.5
    # Translation error weight 
    w_trans: 0.82
    # Orientation error weight 
    w_orient: 0.99
    # Control error weight 
    w_control: 0.05
    # Terminal weight 
    w_terminal: 0.05
    # Footprint weight 
    w_footprint: 1
    # Costmap weight 
    w_costmap: 100.0
    # Waiting time before the robot can try a maneuver, after it had been stuck in the obstacle  
    waiting_time: 3.0
    low_pass_gain: 0.100
    # Optimization tolerance, smaller it is, slower the performance
    opt_tolerance: 0.001
    # Time period, upto which MPC has to predict the control commands 
    prediction_horizon: 2.2
    # Number of steps that the prediction horizon needs to be splitted into
    control_steps: 3

# --------------------------------------------------------------------------Neo LOCAL
# controller_server:
#   ros__parameters:
#     # controller server parameters (see Controller Server for more info)
#     use_sim_time: False
#     controller_frequency: 100.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.001
#     min_theta_velocity_threshold: 0.001
#     controller_plugins: ["FollowPath"]
#     goal_checker_plugins: ["general_goal_checker"]
#     progress_checker_plugin: "progress_checker"
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 100.0
#     general_goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.05
#       yaw_goal_tolerance: 0.02
#       stateful: True
#     # neo_local_planner parameters
#     FollowPath:
#       plugin: "neo_local_planner::NeoLocalPlanner"
#       # The x acceleration limit of the robot in meters/sec^2
#       acc_lim_x : 0.15
#       # The y acceleration limit of the robot in meters/sec^2
#       acc_lim_y : 0.15
#       # The rotational acceleration limit of the robot in radians/sec^2
#       acc_lim_theta : 0.3
#       # The maximum x velocity for the robot in m/s.
#       max_vel_x : 0.1
#       # The minimum x velocity for the robot in m/s, negative for backwards motion.
#       min_vel_x : -0.1
#       # The maximum y velocity for the robot in m/s
#       max_vel_y : 0.1
#       # The minimum y velocity for the robot in m/s
#       min_vel_y : -0.1
#       # The absolute value of the maximum rotational velocity for the robot in rad/s
#       max_rot_vel : 0.4
#       # The absolute value of the minimum rotational velocity for the robot in rad/s
#       min_rot_vel : 0.01
#       # The absolute value of the maximum translational velocity for the robot in m/s
#       max_trans_vel : 0.1
#       # The absolute value of the minimum translational velocity for the robot in m/s
#       min_trans_vel : 0.01
#       # The tolerance in radians for the controller in yaw/rotation when achieving its goal
#       yaw_goal_tolerance : 0.005
#       # The tolerance in meters for the controller in the x & y distance when achieving a goal
#       xy_goal_tolerance : 0.01
#       # How long to fine tune for goal position after reaching tolerance limits [s]
#       goal_tune_time : 2.0
#       # How far to predict control pose into the future based on latest odometry [s]
#       lookahead_time : 0.8
#       # How far to look ahead when computing path orientation [m]
#       lookahead_dist : 0.2
#       # Threshold yaw error below which we consider to start moving [rad]
#       start_yaw_error : 0.5
#       # Gain when adjusting final x position for goal [1/s]
#       pos_x_gain : 1.0
#        # Gain when adjusting y position (holonomic only) [1/s]
#       pos_y_gain : 1.0
#       # Gain for adjusting yaw when not translating, or in case of holonomic drive  [1/s]
#       static_yaw_gain : 3.0
#       # Gain for x cost avoidance (holonomic only)
#       cost_x_gain : 0.2
#       # Gain for y cost avoidance (holonomic only)
#       cost_y_gain : 0.2
#       # How far ahead to compute y cost gradient (constant offset) [m]
#       cost_y_lookahead_dist : 0.0
#       # How far ahead to compute y cost gradient (dynamic offset) [s]
#       cost_y_lookahead_time : 2.0
#       # Gain for yaw cost avoidance
#       cost_yaw_gain : 2.0
#       # Gain for final control low pass filter
#       low_pass_gain : 0.2
#       # Max cost to allow, above we slow down to min_trans_vel or even stop
#       max_cost : 0.95
#       # Max velocity based on curvature [rad/s]
#       max_curve_vel : 0.3
#       # Max distance to goal when looking for it [m]
#       max_goal_dist : 0.5
#       # Max distance allowable for backing up (zero = unlimited) [m]
#       max_backup_dist : 0.0
#       # Minimal distance for stopping [m]
#       min_stop_dist : 0.6
#       # If robot has differential drive, holonomic otherwise
#       differential_drive : false
#       # Enable or disable reversing
#       allow_reversing: false


# -------------------------------------------------------------------------------MPPI
#     goal_checker_plugins: ["goal_checker"]
#     controller_plugins: ["FollowPath"]
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.05
#       yaw_goal_tolerance: 0.05

# controller_server:
#   ros__parameters:
#     controller_frequency: 30.0
#     FollowPath:
#       plugin: "nav2_mppi_controller::MPPIController"
#       time_steps: 56
#       model_dt: 0.05
#       batch_size: 2000
#       vx_std: 0.2
#       vy_std: 0.2
#       wz_std: 0.4
#       vx_max: 0.2
#       vx_min: -0.2
#       vy_max: 0.2
#       vy_min: -0.2
#       wz_max: 1.1
#       iteration_count: 1
#       prune_distance: 1.7
#       transform_tolerance: 0.1
#       temperature: 0.3
#       gamma: 0.015
#       motion_model: "Omni"
#       visualize: false
#       reset_period: 1.0 # (only in Humble)
#       regenerate_noises: false
#       TrajectoryVisualizer:
#         trajectory_step: 5
#         time_step: 3
#       critics: [ "PathAlignCritic", "PathFollowCritic"]
     
#       GoalAngleCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 3.0
#         threshold_to_consider: 0.1
#       ObstaclesCritic:
#         enabled: true
#         cost_power: 1
#         repulsion_weight: 1.5
#         critical_weight: 20.0
#         consider_footprint: false
#         collision_cost: 10000.0
#         collision_margin_distance: 0.1
#         near_goal_distance: 0.5
#         inflation_radius: 0.55 # (only in Humble)
#         cost_scaling_factor: 10.0 # (only in Humble)
#       PathAlignCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 10.0
#         max_path_occupancy_ratio: 0.05
#         trajectory_point_step: 3
#         threshold_to_consider: 0.0
#         offset_from_furthest: 20
#         use_path_orientations: true
#       PathFollowCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 14.0
#         offset_from_furthest: 5
#         threshold_to_consider: 0.0
     
# ------------------------------------------------------------------------DWB
# controller_server:
#   ros__parameters:
#     # controller server parameters (see Controller Server for more info)
#     use_sim_time: False
#     controller_frequency: 20.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.001
#     min_theta_velocity_threshold: 0.001
#     progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
#     goal_checker_plugins: ["goal_checker"]
#     controller_plugins: ["FollowPath"]
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.05
#       yaw_goal_tolerance: 0.05
#       stateful: True
#     # DWB controller parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: 0.01
#       min_vel_y: 0.01
#       max_vel_x: 0.2
#       max_vel_y: 0.2
#       max_vel_theta: 1.0
#       min_speed_xy: 0.01
#       max_speed_xy: 0.2
#       min_speed_theta: -1.0
#       acc_lim_x: 0.4
#       acc_lim_y: 0.4
#       acc_lim_theta: 1.2
#       decel_lim_x: -0.4
#       decel_lim_y: -0.4
#       decel_lim_theta: -1.2
#       vx_samples: 20
#       vy_samples: 20
#       vtheta_samples: 20
#       sim_time: 1.1
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.05
#       trans_stopped_velocity: 0.01
#       short_circuit_trajectory_evaluation: True
#       stateful: True
#       critics: ["PathDist", "GoalDist","BaseObstacle"]
#       BaseObstacle.scale: 0.02
#       PathDist.scale: 32.0
#       GoalDist.scale: 24.0


controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: true

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 10.0
      global_frame: map
      robot_base_frame: base_link
      footprint_padding: 0.1
      # trinary_costmap: true
      footprint:  "[ [0.2,0.2],[-0.2,0.2],[-0.2,-0.2],[0.2,-0.2] ]"
      use_sim_time: true
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.05
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        enabled: True
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 1.1
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan scan1
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          raytrace_max_range: 8.0
          obstacle_max_range: 5.0
          clearing: True
          marking: True
          data_type: "LaserScan"
        scan1:
          topic: /scan2
          max_obstacle_height: 2.0
          raytrace_max_range: 8.0
          obstacle_max_range: 5.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      footprint_padding: 0.0
      footprint:  "[ [0.8,0.8],[-0.8,0.8],[-0.8,-0.8],[0.8,-0.8] ]"
      use_sim_time: true
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan scan1
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          raytrace_max_range: 8.0
          obstacle_max_range: 5.0
          clearing: True
          marking: True
          data_type: "LaserScan"
        scan1:
          topic: /scan2
          max_obstacle_height: 2.0
          raytrace_max_range: 8.0
          obstacle_max_range: 5.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 1.2
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: true
    yaml_filename: "test.yaml"

map_saver:
  ros__parameters:
    use_sim_time: true
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: False


###// SMAC LATTICE//

  # planner_server:
  #   ros__parameters:
  #     planner_plugins: ["GridBased"]
  #     use_sim_time: True

  #     GridBased:
  #       plugin: "nav2_smac_planner/SmacPlannerLattice"
  #       allow_unknown: true                 # Allow traveling in unknown space
  #       tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
  #       max_iterations: 1000000             # Maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
  #       max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
  #       max_planning_time: 5.0              # Max time in s for planner to plan, smooth
  #       analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
  #       analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
  #       reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
  #       change_penalty: 0.05                # Penalty to apply if motion is changing directions (L to R), must be >= 0
  #       non_straight_penalty: 1.05          # Penalty to apply if motion is non-straight, must be => 1
  #       cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
  #       rotation_penalty: 5.0               # Penalty to apply to in-place rotations, if minimum control set contains them
  #       retrospective_penalty: 0.015
  #       lattice_filepath: "/opt/ros/humble/share/nav2_smac_planner/sample_primitives/5cm_resolution/0.5m_turning_radius/omni/output.json"                # The filepath to the state lattice graph
  #       lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
  #       cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
  #       allow_reverse_expansion: false      # If true, allows the robot to use the primitives to expand in the mirrored opposite direction of the current robot's orientation (to reverse).
  #       smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path
  #       smoother:
  #         max_iterations: 1000
  #         w_smooth: 0.3
  #         w_data: 0.2
  #         tolerance: 0.0000000001
  #         do_refinement: true
  #         refinement_num: 2

###// NAVFN//

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 5.0
#     use_sim_time: True
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

###// STRAIGHTLINE//

planner_server:
  ros__parameters:
    plugins: ["GridBased"]
    use_sim_time: true
    GridBased:
      plugin: "nav2_straightline_planner/StraightLine"
      interpolation_resolution: 0.1



behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["backup", "wait", "spin"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: map
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.5
    min_rotational_vel: 0.1
    rotational_acc_lim: 0.5

robot_state_publisher:
  ros__parameters:
    use_sim_time: true

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200
